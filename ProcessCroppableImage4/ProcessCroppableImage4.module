<?php namespace ProcessWire;


class ProcessCroppableImage4 extends Process implements Module {

    public static function getModuleInfo() {
        return array(
            'title'       => 'Croppable Images 4 (Process)',
            'summary'     => 'One or more image uploads (optional predefined crops)',
            'author'      => 'Horst Nogajski',
            'version'     => '2.0.2',
            'requires'    => 'ProcessWire>=3.0.132, PHP>=7.0.0, FieldtypeCroppableImage4>=2.0.2',
            'permission'  => self::adminPagePermission,
            'permissions' => array(self::adminPagePermission => 'Crop images with CroppableImage4'),
            'icon'        => 'crop'
         );
    }

    /**
     * Name used for the page created in the admin
     */
    const adminPageName = 'croppable-image-4';
    const adminPageTitle = 'Croppable Images 4';
    const adminPagePermission = self::adminPageName;

    static protected $sharpeningValues = array('none', 'soft', 'medium', 'strong');

    protected $textCollection = array();

    protected function getText($key, $default = '(N/A)') {
        if(!isset($this->textCollection['CroppableImage4TextCollectionVersion'])) {
            require_once(__DIR__ . '/../lang/CroppableImage4TextCollection.php');
            $c = new CroppableImage4TextCollection();
            $this->textCollection = $c->combine($this->textCollection);
        }
        return isset($this->textCollection[$key]) ? $this->textCollection[$key] : $default;
    }

    public function __construct() {
        require_once(dirname(__FILE__) . '/../classes/CroppableImage4KeepCoords.class.php');
        require_once(dirname(__FILE__) . '/../classes/CroppableImage4Helpers.class.php');
        require_once(dirname(__FILE__) . '/../classes/CroppableImage4CropSettings.class.php');
    }



    public function init() {
        $this->globalOptions = $globalOptions = CroppableImage4Helpers::arrayToObject(CroppableImage4Helpers::getGlobalConfigSettings(true));
        $this->manualSelectionAllowed = !(bool) $globalOptions->manualSelectionDisabled;
        $this->useImageEngineDefaults = (bool) $globalOptions->useImageEngineDefaults;
    }



    public function ___execute() {

        //$this->config->scripts->add($this->config->urls->ProcessCroppableImage4 . "scripts/Jcrop/js/jquery.color.0-9-13.js");
        $this->config->scripts->add($this->config->urls->ProcessCroppableImage4 . "scripts/Jcrop/js/jquery.Jcrop.min.0-9-13.js");
        $this->config->styles->add($this->config->urls->ProcessCroppableImage4 . "scripts/Jcrop/css/jquery.Jcrop.min.0-9-13.css");
        $this->config->scripts->add($this->config->urls->ProcessCroppableImage4 . "scripts/ProcessCroppableImage4.js");
        $this->config->styles->add($this->config->urls->ProcessCroppableImage4 . "styles/ProcessCroppableImage4.css");

        $this->wire('processHeadline', 'Croppable Image 4');

        $field = $this->sanitizer->fieldName($this->input->get->field);

        if(preg_match("/_repeater[0-9]+$/", $field)) {
            $pages_id = (int) end((explode("_repeater", $field)));
            $field = str_replace("_repeater$pages_id", "", $field);
        } else {
            $pages_id = (int) $this->input->get->pages_id;
        }

        $filename = $this->sanitizer->name($this->input->get->filename);
        $height = (int) $this->input->get->height;
        $width = (int) $this->input->get->width;
        $suffix = $this->sanitizer->name($this->input->get->suffix);

        if($pages_id < 0 || strlen($filename) < 3) {
            $out = CroppableImage4Helpers::getTemplate("jcrop", array(
                'invalidFieldText' => $this->getText('invalidFieldText')
            ));
            return $out->render();
        }

        $page = $this->pages->get($pages_id);
        if(0 == $page->id) throw new WireException($this->getText('invalidPageID'));

        $editable = $page instanceof RepeaterPage ? $page->getForPage()->editable() : $page->editable();
        if(!$editable) {
            if('user' == $page->template->name) {
                $user = $this->wire('user');
                $editable = $user->hasPermission(self::adminPagePermission);
            } else {
                throw new WirePermissionException('Not Editable');
            }
        }



        // UGLY WORKAROUND HERE TO GET A FIELDNAME WITH UPPERCASE LETTERS
        foreach($page->fields as $f) {
            if(mb_strtolower($f->name) != $field) continue;
            $fieldName = $f->name;
            break;
        }

        $fieldValue = $page->get($fieldName);
        if(!$fieldValue || !$fieldValue instanceof Pageimages) throw new WireException("Invalid field");

        $img = $page->$fieldName->get('name=' . $filename);
        if(!$img) throw new WireException("Invalid file");

        $origWidth = $img->width;
        $origHeight = $img->height;

        $classname = 'ProcessWire\\' . CroppableImage4Helpers::ciGlobalConfigName;
        $options = $classname::getCroppableImage4Options();
        $x1 = $y1 = $w = $h = 0;
        $quality = $options['quality'];
        $sharpening = $options['sharpening'];
        $keepCoords = new CroppableImage4KeepCoords($img, $suffix, $width, $height);
        if($keepCoords->read($x1, $y1, $w, $h, $quality, $sharpening)) {
            // we got values from session or IPTC, now add them to the options after successful validation
            $options['quality'] = is_integer($quality) && 0 < $quality && 101 > $quality ? $quality : $options['quality'];
            $options['sharpening'] = ImageSizer::sharpeningValueStr($sharpening) == $sharpening ? $sharpening : $options['sharpening'];
        }
        unset($keepCoords);
        $globalOptions = $this->globalOptions;  // CroppableImage4Helpers::getGlobalConfigSettings();
        // if user is not allowed to use DropDown-Selects
        if((bool)$globalOptions->manualSelectionDisabled) {
            // if the manual, dynamic usage of quality and sharpening is disabled, read and provide the defaults
            if($globalOptions->useImageEngineDefaults) {
                $engineOptions = CroppableImage4Helpers::getImageEngineConfigSettings($img->filename);
                $options['quality'] = isset($engineOptions->quality) ? $engineOptions->quality : $options['quality'];
                $options['sharpening'] = isset($engineOptions->sharpening) && isset(self::$sharpeningValues[$engineOptions->sharpening]) ? self::$sharpeningValues[$engineOptions->sharpening] : $options['sharpening'];
            } else {
                $options['quality'] = isset($globalOptions->optionQuality) ? $globalOptions->optionQuality : $options['quality'];
                $options['sharpening'] = isset($globalOptions->optionSharpening) && isset(self::$sharpeningValues[$globalOptions->optionSharpening]) ? self::$sharpeningValues[$globalOptions->optionSharpening] : $options['sharpening'];
            }
        }
        $upscaling = false === $options['upscaling'] ? '0' : '1';
        if(isset($globalOptions->caiWebpAdd)) $options['webpAdd'] = (bool) $globalOptions->caiWebpAdd;
        if(isset($globalOptions->caiWebpQuality)) $options['webpQuality'] = $globalOptions->caiWebpQuality;


        $out = CroppableImage4Helpers::getTemplate('jcrop', array(
            'applyCropText' => $this->getText('applyCropText'),
            'descriptionText' => sprintf(
                $this->getText('descriptionText'),
                '<b id="ci-cropped-width">' . $width . '</b>x<b id="ci-cropped-height">' . $height . '</b>'
            ),
            'field' => $field,
            'filename' => $filename,
            'h' => $h,
            'height' => $height,
            'imageUrl' => $img->url . '?nc=' . $img->mtime,
            'origHeight' => $origHeight,
            'origWidth' => $origWidth,
            'pages_id' => $pages_id,
            'showPreviewText' => $this->getText('showPreviewText'),
            'suffix' => $suffix,
            'upscaling' => $upscaling,
            'w' => $w,
            'width' => $width,
            'x1' => $x1,
            'y1' => $y1,
            'sharpeningText' => $this->getText('sharpeningText'),
            'sharpening' => $options['sharpening'],
            'qualityText' => $this->getText('qualityText'),
            'quality' => $options['quality'],
            'manualSelectionAllowed' => ($this->manualSelectionAllowed ? '' : 'style="display:none"')
        ));

        return $out->render();
    }



    public function ___executeSave() {

        /** Checklist: sanitisation and validation of each post param
        *
        *   [x] - [x] pages_id
        *   [x] - [x] field
        *   [x] - [x] filename
        *   [x] - [x] suffix
        *   [x] - [ ] crop
        *   [x] - [x] targetWidth
        *   [x] - [x] targetHeight
        *   [x] - [x] quality
        *   [x] - [x] sharpening
        */

        // get page-id from post, sanitize, validate page and edit permission
        $pages_id = intval($this->input->post->pages_id);
        $page = wire('pages')->get($pages_id);
        if(!$page->id) throw new WireException("Invalid page");
        $editable = $page instanceof RepeaterPage ? $page->getForPage()->editable() : $page->editable();
        if(!$editable) {
            if('user' == $page->template->name) {
                $user = $this->wire('user');
                $editable = $user->hasPermission(self::adminPagePermission);
            } else {
                throw new WirePermissionException('Not Editable');
            }
        }

        // get fieldname from post, sanitize and validate
        $field = wire('sanitizer')->fieldName($this->input->post->field);

        // UGLY WORKAROUND HERE TO GET A FIELDNAME WITH UPPERCASE LETTERS
        foreach($page->fields as $f) {
            if(mb_strtolower($f->name) != $field) continue;
            $fieldName = $f->name;
            break;
        }

        $fieldValue = $page->get($fieldName);
        if(!$fieldValue || !$fieldValue instanceof Pagefiles) throw new WireException("Invalid field");
        $field = $fieldValue; unset($fieldValue);

        // get filename from post, sanitize and validate
        // !! filename is wrong typo, it returns only a basename !!   Should we change this through all files, including JS?
        $filename = wire('sanitizer')->name($this->input->post->filename);
        $img = $field->get('name=' . $filename);
        if(!$img) throw new WireException("Invalid filename");

        // get suffix from post, sanitize and validate
        // we never will work with the original image, so we need a valid $suffix
        $suffix = wire('sanitizer')->name($this->input->post->suffix);
        if(!$suffix || strlen($suffix) == 0) throw new WireException("We have no Suffix");

        // validate suffix against crop-names
        $cropSettings = new CroppableImage4CropSettings($field->field->cropSetting);
        $cropSetting = $cropSettings->getCropSetting($suffix, $page->template->name);
        if(!$cropSetting || !$cropSetting->isTemplateAllowed($page->template->name)) throw new WireException(sprintf($this->getText('noValidSuffix'), $suffix, $page->template->name));

        // build the targetfilename and its URL
        // get the merged imageoptions (default & config & session)
        $classname = 'ProcessWire\\' . CroppableImage4Helpers::ciGlobalConfigName;
        $options = $classname::getCroppableImage4Options();
        // get all globalOptions
        $globalOptions = $this->globalOptions;  // CroppableImage4Helpers::getGlobalConfigSettings();

        // if user is allowed to use DropDown-Selects
        if(!(bool)$globalOptions->manualSelectionDisabled) {
            // get quality & sharpening from post, sanitize and validate it
            $quality = $this->input->post->quality && is_numeric($this->input->post->quality) && 0 < intval($this->input->post->quality) && 101 > intval($this->input->post->quality) ? intval($this->input->post->quality) : $options['quality'];
            $sharpening = $this->input->post->sharpening && ImageSizer::sharpeningValueStr($this->input->post->sharpening)==$this->input->post->sharpening ? $this->input->post->sharpening : $options['sharpening'];
        } else {
            // if the manual, dynamic usage of quality and sharpening is disabled, read and provide the defaults
            if($globalOptions->useImageEngineDefaults) {
                // we may use image engine settings or settings from config ImageSizerOptions
                $engineOptions = CroppableImage4Helpers::getImageEngineConfigSettings($img->filename);
                $quality = isset($engineOptions->quality) ? $engineOptions->quality : $options['quality'];
                $sharpening = isset($engineOptions->sharpening) && isset(self::$sharpeningValues[$engineOptions->sharpening]) ? self::$sharpeningValues[$engineOptions->sharpening] : $options['sharpening'];
            } else {
                // we may use global settings from CroppableImage4 ModuleConfigPage or from config ImageSizerOptions
                $quality = isset($globalOptions->optionQuality) ? $globalOptions->optionQuality : $options['quality'];
                $sharpening = isset($globalOptions->optionSharpening) && isset(self::$sharpeningValues[$globalOptions->optionSharpening]) ? self::$sharpeningValues[$globalOptions->optionSharpening] : $options['sharpening'];
            }
            // TODO 5 -c enhancement :add option on Fieldlevel for Quality & Sharpening ???
        }
#my_var_dump(array($globalOptions, (isset($engineOptions) ? $engineOptions : null), $quality, $sharpening), 1);
#die();

        // get target dimensions from post and sanitize
        $targetWidth = intval($this->input->post->width);
        $targetHeight = intval($this->input->post->height);
        if($targetWidth <> $cropSetting->width) throw new WireException("Invalid setting width");
        if($targetHeight <> $cropSetting->height) throw new WireException("Invalid setting height");

        // get crop values from post and validate
        $crop = $this->input->post->crop;
        if(!is_array($crop) || 4 != count($crop)) throw new WireException("Invalid crop value");
        foreach($crop as $k => $v) $crop[$k] = intval($v);
        // check if upscaling is disallowed
        if(!$options['upscaling'] && !($crop['w'] > $cropSetting->width || $crop['h'] > $cropSetting->height)) {
            // both dimensions are to small, this is only by abuse or error
            if($crop['w'] < $cropSetting->width || $crop['h'] < $cropSetting->height) {
                throw new WireException("To small settings for width and/or height!");
            }
        }
        // TODO: validate AspectRatio of $crop ??


        $imOptions = array_merge($options,
            array(
                'forceNew'    => true,
                'quality'     => $quality,
                'sharpening'  => $sharpening,
                'webpAdd'     => (bool) $globalOptions->caiWebpAdd,
                'webpQuality' => $globalOptions->caiWebpQuality
            )
        );
        ##if($crop['w'] > 0 && $crop['h'] > 0) $imOptions['cropExtra'] = array($crop['x1'], $crop['y1'], $crop['w'], $crop['h']);
        $finalOptions = CroppableImage4Helpers::mergeFinalOptions($suffix, $imOptions, $crop['x1'], $crop['y1'], $crop['w'], $crop['h']);

        // pass all to pageimage
        $newImg = $img->size($targetWidth, $targetHeight, $finalOptions);


// To fake a failed ImageSizer manipulation during development, uncomment the next line,
// this enables to workout the styling for Errormessages in the ReviewScreen!
#$this->error = sprintf($this->getText('imageSizerResizeFailed'), $targetWidth, $targetHeight, basename($targetPath), '<br />');

        $targetUrl = $newImg->url;

        if($this->error) {
            $confirmCropText = sprintf($this->getText('confirmCropTextError'), $this->error);
            $cropAgainText = $this->getText('cropAgainTextError');
        } else {
            $confirmCropText = $this->getText('confirmCropText');
            $cropAgainText = $this->getText('cropAgainText');
            // keep as session & permanent storage
            $keepCoords = new CroppableImage4KeepCoords($img, $suffix, $targetWidth, $targetHeight);
            $keepCoords->write($crop['x1'], $crop['y1'], $crop['w'], $crop['h'], $quality, $sharpening);
            unset($keepCoords);

            // remove old image variations of this crop version, now that we have successfully created a new crop image
            foreach($img->getVariations() as $variation) {
                $info = $variation->isVariation($variation->name, true);
                $variationParentName = isset($info['parentName']) ? $info['parentName'] : null;
                if($newImg->name == $variationParentName) {
                    unlink($variation->filename);  // remove detected child of new CropImage
                }
            }

            // now create a 0x48 px thumbnail
            $thumbnailOptions = array_merge($imOptions,
                array(
                    'forceNew'    => true,
                    'quality'     => 80,
                    'sharpening'  => 'soft',
                    'webpAdd'     => false,
                    'suffix'      => ''
                )
            );
            $newImg->height(48, $thumbnailOptions);
        }

        // output for reviewing
        $this->config->styles->add($this->config->urls->ProcessCroppableImage4 . "styles/ProcessCroppableImage4.css");

        $out = CroppableImage4Helpers::getTemplate("review-crop", array(
            'confirmCropText' => $confirmCropText,
            'cropAgainText' => $cropAgainText,
            'backToCropUrl' => '../?' . http_build_query(array(
                'filename' => $filename,
                'suffix' => $suffix,
                'width' => $targetWidth,
                'height' => $targetHeight,
                'pages_id' => $pages_id,
                'field' => $field->field->name,
                #'field' => mb_strtolower($field->field->name),
                'modal' => 1,
                'quality' => $quality,
                'sharpening' => $sharpening,
            )),
            'suffix' => $suffix,
            'targetUrl' => $targetUrl . '?timestamp=' . time(),
            'imageUrl' => $img->url,
            'width' => $targetWidth,
            'height' => $targetHeight,
            'sharpening' => $sharpening,
            'quality' => $quality
        ));

        return $out->render();
    }



    public function ___upgrade($fromVersion, $toVersion) {
        // testing!
        if('0.9.14' > $fromVersion) {
            $this->log->message($this->className() . "{$fromVersion} :: {$toVersion}");
        }
    }


    public function ___install() {
        parent::___install();
        // optionally check / delete orphaned process page / permission from older installations
            // check for older versions
            $p = $this->pages->get(3)->children('include=hidden')->get('name=croppable-image');
            if($p->id) $p->delete();
            $p = $this->permissions->get('image-crop');
            if($p->id > 0) $p->delete();
            // check for newer versions
            $p = $this->pages->get(3)->children('include=hidden')->get('name=' . self::adminPageName);
            if($p->id) $p->delete();

        // create a new process page for croppable images 4
        $p = new Page();
        $p->template = $this->templates->get('admin');
        $p->parent = $this->pages->get(3);  // /admin/pages
        $p->title = self::adminPageTitle;
        $p->name = self::adminPageName;
        $p->process = $this;
        $p->addStatus(Page::statusHidden);  // should not show up as link to blank page in the Admin Pages-Menu
        $p->save();
    }



    public function ___uninstall() {
        parent::___uninstall();
        // $moduleID = $this->modules->getModuleID($this);
        // $page = $this->pages->get("template=admin, process=$moduleID, name=" . self::adminPageName);

        // remove ProcessPage
        $p = $this->pages->get(3)->children('include=hidden')->get('name=' . self::adminPageName);
        if($p->id) $p->delete();
    }

}
